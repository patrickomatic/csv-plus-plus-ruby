#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require_relative '../lexer/racc_lexer'
  require_relative '../entities/ast_builder'

module CSVPlusPlus
  module Parser
    class CodeSection < Racc::Parser

module_eval(<<'...end code_section.y/module_eval...', 'code_section.y', 68)
  extend ::T::Sig
  extend ::T::Generic
  include ::CSVPlusPlus::Lexer::RaccLexer
  include ::CSVPlusPlus::Entities::ASTBuilder

  ReturnType = type_member {{ fixed: ::T.nilable(::String) }}

  sig { params(scope: ::CSVPlusPlus::Runtime::Scope).void }
  def initialize(scope)
    super()
    @scope = scope
  end

  protected

  sig { override.params(input: ::String).returns(::T::Boolean) }
  def anything_to_parse?(input)
    @rest = input.strip

    return !@rest.index(::CSVPlusPlus::Lexer::END_OF_CODE_SECTION).nil?
  end

  sig { override.returns(::String) }
  def parse_subject
    'code section'
  end

  sig { override.returns(::CSVPlusPlus::Lexer::Tokenizer) }
  def tokenizer
    ::CSVPlusPlus::Lexer::Tokenizer.new(
      catchall: /[\{\}\(\),]/, # TODO: do I even need this (oh I think brackets are for arrays
      ignore: /\s+|\#.*/,
      stop_fn: lambda do |scanner|
        return false unless scanner.scan(/#{::CSVPlusPlus::Lexer::END_OF_CODE_SECTION}/)

        @tokens << [:END_OF_CODE, scanner.matched]
        @rest = scanner.rest.strip
        true
      end,
      tokens: [
        ::CSVPlusPlus::Lexer::Token.new(regexp: /:=/, token: :ASSIGN),
        ::CSVPlusPlus::Lexer::Token.new(regexp: /\bdef\b/, token: :FN_DEF),
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:TRUE],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:FALSE],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:NUMBER],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:STRING],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:INFIX_OP],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:REF]
      ],
    )
  end

  sig { override.returns(ReturnType) }
  def return_value
    @rest
  end

  private

  sig do
    params(id: ::Symbol, arguments: ::T::Array[::Symbol], body: ::CSVPlusPlus::Entities::Entity)
      .returns(::CSVPlusPlus::Entities::Entity)
  end
  def def_function(id, arguments, body)
    @scope.def_function(id, function(id, arguments, body))
  end

  sig do
    params(id: ::Symbol, ast: ::CSVPlusPlus::Entities::Entity)
      .returns(::CSVPlusPlus::Entities::Entity)
  end
  def def_variable(id, ast)
    @scope.def_variable(id, ast)
  end
...end code_section.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    33,     9,    12,    13,    28,    20,    14,    16,    30,
    32,    30,    20,    40,    30,    30,    34,    24,    20,    22,
    25,    21,    23,    24,    29,    22,    25,    21,    23,    24,
    20,    22,    25,    21,    23,    24,    36,    22,    25,    21,
    23,    20,    39,     3,    41,    10,     7,    24,     7,    22,
    25,    21,    23,    30,    30,   nil,   nil,   nil,    24,    42,
    22,    25,    21,    23,     8,   nil,     8 ]

racc_action_check = [
    13,    27,     1,     7,     8,    16,    15,     9,    12,    17,
    25,    26,    20,    34,    35,    37,    27,    13,    30,    13,
    13,    13,    13,    15,    16,    15,    15,    15,    15,    20,
    42,    20,    20,    20,    20,    30,    31,    30,    30,    30,
    30,    32,    32,     0,    38,     2,     0,    42,     2,    42,
    42,    42,    42,    31,    43,   nil,   nil,   nil,    32,    38,
    32,    32,    32,    32,     0,   nil,     2 ]

racc_action_pointer = [
    41,     2,    43,   nil,   nil,   nil,   nil,   -20,    -2,     7,
   nil,   nil,     5,    -3,   nil,     3,     1,   -12,   nil,   nil,
     9,   nil,   nil,   nil,   nil,     7,   -10,    -3,   nil,   nil,
    15,    32,    38,   nil,   -10,    -7,   nil,    -6,    40,   nil,
   nil,   nil,    27,    33 ]

racc_action_default = [
   -26,   -26,   -26,    -2,    -4,    -5,    -6,   -26,   -26,   -26,
    -1,    -3,   -26,   -26,    44,   -26,   -26,   -12,   -13,   -14,
   -26,   -16,   -17,   -18,   -19,   -20,    -7,   -26,    -9,   -11,
   -26,   -26,   -26,    -8,   -26,   -21,   -15,   -25,   -26,   -23,
   -10,   -22,   -26,   -24 ]

racc_goto_table = [
    17,     4,    26,    11,     1,     2,    15,    31,    27,    38,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    35,   nil,    37,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43 ]

racc_goto_check = [
     7,     3,     7,     3,     1,     2,     6,     7,     8,    11,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,   nil,     7,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7 ]

racc_goto_pointer = [
   nil,     4,     5,     1,   nil,   nil,    -6,   -13,    -8,   nil,
   nil,   -23 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,     6,   nil,   nil,   nil,    18,
    19,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 28, :_reduce_none,
  1, 28, :_reduce_none,
  2, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  4, 31, :_reduce_7,
  3, 33, :_reduce_8,
  2, 33, :_reduce_9,
  3, 35, :_reduce_10,
  1, 35, :_reduce_11,
  3, 32, :_reduce_12,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  3, 34, :_reduce_15,
  1, 34, :_reduce_16,
  1, 34, :_reduce_17,
  1, 34, :_reduce_18,
  1, 34, :_reduce_19,
  1, 34, :_reduce_20,
  3, 37, :_reduce_21,
  4, 36, :_reduce_22,
  3, 36, :_reduce_23,
  3, 38, :_reduce_24,
  1, 38, :_reduce_25 ]

racc_reduce_n = 26

racc_shift_n = 44

racc_token_table = {
  false => 0,
  :error => 1,
  :END_OF_CODE => 2,
  "(" => 3,
  ")" => 4,
  :FN_DEF => 5,
  :ASSIGN => 6,
  "^" => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  "&" => 12,
  "=" => 13,
  "<" => 14,
  ">" => 15,
  "<=" => 16,
  ">=" => 17,
  "<>" => 18,
  "," => 19,
  :FALSE => 20,
  :INFIX_OP => 21,
  :NUMBER => 22,
  :REF => 23,
  :STRING => 24,
  :TRUE => 25,
  :VAR_REF => 26 }

racc_nt_base = 27

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "END_OF_CODE",
  "\"(\"",
  "\")\"",
  "FN_DEF",
  "ASSIGN",
  "\"^\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"&\"",
  "\"=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<>\"",
  "\",\"",
  "FALSE",
  "INFIX_OP",
  "NUMBER",
  "REF",
  "STRING",
  "TRUE",
  "VAR_REF",
  "$start",
  "code_section",
  "code",
  "def",
  "fn_def",
  "var_def",
  "fn_def_args_or_not",
  "exp",
  "fn_def_args",
  "fn_call",
  "infix_fn_call",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'code_section.y', 33)
  def _reduce_7(val, _values, result)
     def_function(val[1].to_sym, val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 35)
  def _reduce_8(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 36)
  def _reduce_9(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 38)
  def _reduce_10(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 39)
  def _reduce_11(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 41)
  def _reduce_12(val, _values, result)
     def_variable(val[0].to_sym, val[2])
    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

module_eval(<<'.,.,', 'code_section.y', 45)
  def _reduce_15(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 46)
  def _reduce_16(val, _values, result)
     result = string(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 47)
  def _reduce_17(val, _values, result)
     result = number(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 48)
  def _reduce_18(val, _values, result)
     result = boolean(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 49)
  def _reduce_19(val, _values, result)
     result = boolean(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 50)
  def _reduce_20(val, _values, result)
     result = reference(ref: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 52)
  def _reduce_21(val, _values, result)
     result = function_call(val[1].to_sym, [val[0], val[2]], infix: true)
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 54)
  def _reduce_22(val, _values, result)
     result = function_call(val[0].to_sym, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 55)
  def _reduce_23(val, _values, result)
     result = function_call(val[0].to_sym, [])
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 57)
  def _reduce_24(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'code_section.y', 58)
  def _reduce_25(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class CodeSection
  end   # module Parser
end   # module CSVPlusPlus
