#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require_relative '../lexer'
  require_relative '../lexer/racc_lexer'
  require_relative '../entities/ast_builder'

module CSVPlusPlus
  module Parser
    class CellValue < Racc::Parser

module_eval(<<'...end cell_value.y/module_eval...', 'cell_value.y', 49)
  extend ::T::Sig
  extend ::T::Generic
  include ::CSVPlusPlus::Entities::ASTBuilder
  include ::CSVPlusPlus::Lexer::RaccLexer

  ReturnType = type_member {{ fixed: ::T.nilable(::CSVPlusPlus::Entities::Entity) }}

  protected

  sig { override.params(input: ::String).returns(::T::Boolean) }
  def anything_to_parse?(input)
    input.strip.start_with?('=')
  end

  sig { override.returns(::String) }
  def parse_subject
    'cell value'
  end

  sig { override.returns(ReturnType) }
  def return_value
    @ast
  end

  sig { override.returns(::CSVPlusPlus::Lexer::Tokenizer) }
  def tokenizer
    ::CSVPlusPlus::Lexer::Tokenizer.new(
      catchall: /[\{\}\(\),=]/,
      ignore: /\s+/,
      tokens: [
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:TRUE],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:FALSE],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:NUMBER],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:STRING],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:INFIX_OP],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:VAR_REF],
        ::CSVPlusPlus::Lexer::TOKEN_LIBRARY[:REF]
      ]
    )
  end
...end cell_value.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    23,    19,    14,     2,    15,     7,     3,    13,    17,    15,
    15,     7,    15,   nil,   nil,   nil,    15,     7,   nil,   nil,
    11,    24,     9,    12,     8,    10,    11,     7,     9,    12,
     8,    10,    11,   nil,     9,    12,     8,    10,     7,    21,
   nil,   nil,    11,   nil,     9,    12,     8,    10,   nil,   nil,
   nil,   nil,   nil,    11,   nil,     9,    12,     8,    10 ]

racc_action_check = [
    20,    16,     4,     0,     4,     2,     1,     3,    12,    18,
    22,     7,    25,   nil,   nil,   nil,    16,    15,   nil,   nil,
     2,    20,     2,     2,     2,     2,     7,    24,     7,     7,
     7,     7,    15,   nil,    15,    15,    15,    15,    17,    17,
   nil,   nil,    24,   nil,    24,    24,    24,    24,   nil,   nil,
   nil,   nil,   nil,    17,   nil,    17,    17,    17,    17 ]

racc_action_pointer = [
    -7,     6,     3,     7,   -14,   nil,   nil,     9,   nil,   nil,
   nil,   nil,     6,   nil,   nil,    15,    -2,    36,    -9,   nil,
    -3,   nil,    -8,   nil,    25,    -6 ]

racc_action_default = [
   -15,   -15,   -15,   -15,   -15,    -2,    -3,   -15,    -5,    -6,
    -7,    -8,    -9,    26,    -1,   -15,   -15,   -15,   -14,    -4,
   -15,   -11,   -13,   -10,   -15,   -12 ]

racc_goto_table = [
     4,     1,    20,   nil,   nil,    16,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    18,   nil,    22,   nil,   nil,   nil,   nil,
   nil,   nil,    25 ]

racc_goto_check = [
     2,     1,     5,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,    -2,   nil,   nil,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,     5,     6,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 26, :_reduce_1,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  3, 27, :_reduce_4,
  1, 27, :_reduce_5,
  1, 27, :_reduce_6,
  1, 27, :_reduce_7,
  1, 27, :_reduce_8,
  1, 27, :_reduce_9,
  4, 28, :_reduce_10,
  3, 28, :_reduce_11,
  3, 30, :_reduce_12,
  1, 30, :_reduce_13,
  3, 29, :_reduce_14 ]

racc_reduce_n = 15

racc_shift_n = 26

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  "^" => 4,
  "*" => 5,
  "/" => 6,
  "+" => 7,
  "-" => 8,
  "&" => 9,
  "=" => 10,
  "<" => 11,
  ">" => 12,
  "<=" => 13,
  ">=" => 14,
  "<>" => 15,
  :EOL => 16,
  :FALSE => 17,
  :INFIX_OP => 18,
  :NUMBER => 19,
  :REF => 20,
  :STRING => 21,
  :TRUE => 22,
  :VAR_REF => 23,
  "," => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "\"^\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"&\"",
  "\"=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<>\"",
  "EOL",
  "FALSE",
  "INFIX_OP",
  "NUMBER",
  "REF",
  "STRING",
  "TRUE",
  "VAR_REF",
  "\",\"",
  "$start",
  "cell_value",
  "exp",
  "fn_call",
  "infix_fn_call",
  "fn_call_args" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'cell_value.y', 21)
  def _reduce_1(val, _values, result)
     @ast = val[1]
    result
  end
.,.,

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'cell_value.y', 25)
  def _reduce_4(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 26)
  def _reduce_5(val, _values, result)
     result = string(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 27)
  def _reduce_6(val, _values, result)
     result = number(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 28)
  def _reduce_7(val, _values, result)
     result = boolean(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 29)
  def _reduce_8(val, _values, result)
     result = boolean(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 30)
  def _reduce_9(val, _values, result)
     result = reference(ref: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 32)
  def _reduce_10(val, _values, result)
     result = function_call(val[0].to_sym, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 33)
  def _reduce_11(val, _values, result)
     result = function_call(val[0].to_sym, [])
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 35)
  def _reduce_12(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 36)
  def _reduce_13(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'cell_value.y', 38)
  def _reduce_14(val, _values, result)
     result = function_call(val[1].to_sym, [val[0], val[2]], infix: true)
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class CellValue
  end   # module Parser
end   # module CSVPlusPlus
